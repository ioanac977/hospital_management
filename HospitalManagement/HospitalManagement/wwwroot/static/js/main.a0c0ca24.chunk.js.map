{"version":3,"sources":["components/AppHeader.js","components/AppFooter.js","components/Home.js","constants/index.js","components/form/AddUserForm.js","components/form/EditUserForm.js","components/form/RegistrationModal.js","components/UsersList.js","components/Users.js","components/Account.js","components/form/auth/Login.js","components/form/auth/Logout.js","components/PrivateRoute.js","_helpers/Role.js","components/PatientsList.js","components/Patients.js","components/ProtectedRoute.js","App.js","reportWebVitals.js","index.js"],"names":["AppHeader","state","isOpen","toggle","bind","this","setState","authUser","JSON","parse","sessionStorage","getItem","Navbar","color","dark","expand","NavbarBrand","href","src","width","className","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","to","isAdmin","Component","AppFooter","style","padding","React","Home","display","Redirect","PATIENTS_API_URL","USERS_API_URL","LOGOUT_API_URL","CHECK_USERNAME_API_URL","EDIT_USER_INFO","AddUserForm","id","username","password","name","enableButton","validate","usernameState","passwordState","isPasswordEditing","onChange","e","target","value","handleCheckbox","event","type","checked","console","log","submitNew","preventDefault","fetch","method","headers","body","stringify","then","res","json","user","props","addUserToState","catch","err","currentUserValue","text","length","userList","users","localeCompare","makeCheckRequest","buttonFlag","find","Form","onSubmit","FormGroup","Label","for","Input","checkIfUsernameExist","valid","invalid","FormFeedback","checkPassword","disabled","EditUserForm","submitEdit","requestBody","updateUserIntoState","Button","changeEditingFlag","RegistrationModal","modal","previous","isNew","title","button","minWidth","Modal","ModalHeader","ModalBody","UsersList","deleteItem","window","confirm","deleteItemFromState","items","Table","striped","textAlign","colSpan","align","map","item","scope","toString","updateState","Users","getItens","updated","filter","Container","paddingTop","Row","Col","Account","undefined","authUserFromStorage","Login","handleChange","a","redirect","loginError","inputState","credentials","setItem","handleLogin","submitForm","placeholder","validateInput","Logout","navigate","logout","removeItem","handleLogout","push","PrivateRoute","component","rest","roles","render","currentUser","pathname","from","location","Role","PatientsList","nameFilter","hospitalFilter","isDropdownOpen","unformatedDate","date","Date","Intl","DateTimeFormat","year","month","day","format","d","toLowerCase","includes","hospital","distinctHospitalItems","index","self","x","indexOf","onChangeHandler","Dropdown","onDropDownToogle","DropdownToggle","caret","DropdownMenu","DropdownItem","onDropdownSelectAll","divider","onDropdownItemSelect","formatDate","dateOfBirth","Patients","getItems","ProtectedRoute","App","setGlobalCredentials","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a0c0ca24.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react'; // 1\r\nimport {Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\"; // 2\r\nclass AppHeader extends Component { // 3\r\n    state = { // 4\r\n        isOpen: false\r\n    };\r\n    toggle = this.toggle.bind(this); // 5\r\n    toggle() { // 6\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let authUser = JSON.parse(sessionStorage.getItem(\"authorizedUser\"));\r\n        return <Navbar color=\"dark\" dark expand=\"md\">\r\n            <NavbarBrand href=\"/\">\r\n                <img src=\"https://seeklogo.com/images/H/hospital-clinic-plus-logo-7916383C7A-seeklogo.com.png\"\r\n                     width=\"50\" className=\"d-inline-block align-top\" alt=\"\"/>\r\n            </NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle}/>\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n                {/*auth user != null is not the most secure, I should've use the global state for authUser*/}\r\n                <Nav className=\"ml-auto\" navbar>\r\n                    {authUser != null &&\r\n                    <Fragment>\r\n                        <NavItem>\r\n                            <Link className=\"Link\" to=\"/patients\">Patients</Link>\r\n                        </NavItem>\r\n                        {authUser.isAdmin &&\r\n\r\n                        <NavItem>\r\n                            <Link className=\"Link\" to=\"/users\">Users</Link>\r\n                        </NavItem>\r\n                        }\r\n                        <NavItem>\r\n                            <Link className=\"Link\" to=\"/account\">Account</Link>\r\n                        </NavItem>\r\n\r\n                        <NavItem>\r\n                            <Link className=\"Link\" to=\"/logout\">Logout</Link>\r\n                        </NavItem>\r\n                    </Fragment>\r\n                    }\r\n\r\n                </Nav>\r\n            </Collapse>\r\n        </Navbar>;\r\n    }\r\n}\r\n\r\nexport default AppHeader; // 8","import React, {Fragment} from 'react';\r\n\r\nclass AppFooter extends React.Component {\r\n    render() {\r\n        return <Fragment>\r\n            <hr className=\"featurette-divider\"/>\r\n            <footer style={{padding: \"0 50px\"}} className=\"navbar fixed-bottom\">\r\n                <p>© 2021 Ioana Cristea <a href=\"/\">Terms and Conditions</a></p>\r\n            </footer>\r\n        </Fragment>;\r\n    }\r\n}\r\n\r\nexport default AppFooter;","import React, {Component} from 'react';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        let authUserFromStorage = JSON.parse(sessionStorage.getItem(\"authorizedUser\"));\r\n        if (authUserFromStorage != null) {\r\n            return <div style={{display:\"flex\",\"justify-content\":\"center\"}}>\r\n                <img src=\"https://cdn.dribbble.com/users/112162/screenshots/1130822/lifeline.gif\"/>\r\n            </div>\r\n        }\r\n        return (<Redirect to={'/login'}/>)\r\n    }\r\n}\r\n\r\nexport default Home;","export const PATIENTS_API_URL = 'api/Patients';\r\nexport const USERS_API_URL = 'api/Users';\r\nexport const AUTH_API_URL = 'api/Auth/Login';\r\nexport const LOGOUT_API_URL = 'api/Auth/Logout';\r\nexport const CHECK_USERNAME_API_URL = 'api/Auth/CheckUsername';\r\nexport const EDIT_USER_INFO = \"api/Users/UserInfo\"","import React, {Fragment} from 'react';\r\nimport {Button, Form, FormFeedback, FormGroup, Input, Label} from 'reactstrap';\r\n\r\nimport {CHECK_USERNAME_API_URL, EDIT_USER_INFO, USERS_API_URL} from '../../constants';\r\n\r\nclass AddUserForm extends React.Component {\r\n\r\n    state = {\r\n        id: 0,\r\n        username: '',\r\n        password: '',\r\n        name: '',\r\n        isAdmin: false,\r\n        enableButton: true,\r\n        validate: {\r\n            usernameState: '',\r\n            passwordState:'',\r\n        },\r\n        isPasswordEditing: false,\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handleCheckbox.bind(this);\r\n        if (this.props.user) {\r\n            const {id, username, password, name, isAdmin} = this.props.user;\r\n            this.setState({id, username, password, name, isAdmin});\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    handleCheckbox = event => {\r\n\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(\"value is :\", value);\r\n        console.log(\"name:\", name);\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    };\r\n\r\n    makeCheckRequest(currentUserValue) {\r\n\r\n        fetch(CHECK_USERNAME_API_URL, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: currentUserValue,\r\n            })\r\n        })\r\n            .then(res => res.text())\r\n            .then(res => {\r\n                if (res === \"false\") {\r\n                    this.setState({validate: {...this.state.validate, usernameState: 'has-success'}});\r\n                    this.setState({enableButton: true})\r\n                } else {\r\n                    this.setState({validate: {...this.state.validate, usernameState: 'has-danger'}});\r\n                    this.setState({enableButton: false})\r\n                }\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    checkPassword(e){\r\n        const {validate} = this.state;\r\n        if ((e.target.value).length > 2) {\r\n            validate.passwordState = 'has-success'\r\n        } else {\r\n            validate.passwordState = 'has-danger'\r\n        }\r\n        this.setState({validate})\r\n\r\n    }\r\n    checkIfUsernameExist(e) {\r\n        //We want to reduce the numbers of request checks to server\r\n        //That's why we implement two methods of verify if username on modify/create already exist on db\r\n        const {validate} = this.state;\r\n        const userList = this.props.users;\r\n\r\n        let currentUserValue = e.target.value;\r\n\r\n        //if logged user is NOT admin then we need to make requests to check if new username already exist in users table\r\n        if (userList === null) {\r\n            if(currentUserValue.localeCompare(JSON.parse(sessionStorage.getItem(\"authorizedUser\")).username)!== 0)\r\n                 this.makeCheckRequest(currentUserValue);\r\n\r\n        }//if logged user is admin then he has access to usersList -> we are making a check based on data that is already available\r\n        else {\r\n            validate.usernameState = 'has-danger';\r\n            let buttonFlag = false;\r\n            if (currentUserValue.length > 2) {\r\n                const existingUser = userList.find(user => user.username === currentUserValue);\r\n                if (!existingUser) {\r\n                    validate.usernameState = 'has-success';\r\n                    buttonFlag = true;\r\n                }\r\n            }\r\n            this.setState({enableButton: buttonFlag})\r\n        }\r\n\r\n        this.setState({validate})\r\n    }\r\n\r\n    submitNew = e => {\r\n        e.preventDefault();\r\n\r\n        fetch(`${USERS_API_URL}`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n                name: this.state.name,\r\n                isAdmin: this.state.isAdmin\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(user => {\r\n                this.props.addUserToState(user);\r\n                this.props.toggle();\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n\r\n        return <Form onSubmit={this.submitNew}>\r\n            <Fragment>\r\n                <FormGroup>\r\n                    <Label for=\"username\">Username:</Label>\r\n                    <Input type=\"text\" name=\"username\" onChange={(e) => {\r\n                        this.onChange(e);\r\n                        this.checkIfUsernameExist(e)\r\n                    }}\r\n                           value={this.state.username === null ? '' : this.state.username}\r\n                           valid={this.state.validate.usernameState === 'has-success'}\r\n                           invalid={this.state.validate.usernameState === 'has-danger'}/>\r\n                    <FormFeedback valid>\r\n                        Great! Username is valid\r\n                    </FormFeedback>\r\n                    <FormFeedback>\r\n                        Username is less then 3 characters or it already exist\r\n                        Change to a valid one!\r\n                    </FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"name\">Name:</Label>\r\n                    <Input type=\"text\" name=\"name\" onChange={this.onChange}\r\n                           value={this.state.name === null ? '' : this.state.name}/>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"name\">IsAdmin:</Label>\r\n                    <Input type=\"checkbox\" name=\"isAdmin\" onChange={this.handleCheckbox}\r\n                           checked={this.state.isAdmin}/>\r\n                </FormGroup>\r\n\r\n            </Fragment>\r\n\r\n            <FormGroup>\r\n                <Label for=\"password\">New Password:</Label>\r\n                <Input type=\"text\" name=\"password\" onChange={(e) => {\r\n                    this.onChange(e);\r\n                    this.checkPassword(e)\r\n                }}\r\n                        valid={this.state.validate.passwordState === 'has-success'}\r\n                        invalid={this.state.validate.passwordState === 'has-danger'}/>\r\n                <FormFeedback valid>\r\n                    Great! Password is valid\r\n                </FormFeedback>\r\n                <FormFeedback>\r\n                    Password is less then 3 characters.\r\n                    Add some more characters!\r\n                </FormFeedback>\r\n            </FormGroup>\r\n            <button disabled={!this.state.enableButton}>Save</button>\r\n\r\n\r\n        </Form>;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AddUserForm;","import React, {Fragment} from 'react';\r\nimport {Button, Form, FormFeedback, FormGroup, Input, Label} from 'reactstrap';\r\n\r\nimport {CHECK_USERNAME_API_URL, EDIT_USER_INFO, USERS_API_URL} from '../../constants';\r\n\r\nclass EditUserForm extends React.Component {\r\n\r\n    state = {\r\n        id: 0,\r\n        username: '',\r\n        password: '',\r\n        name: '',\r\n        isAdmin: false,\r\n        enableButton: true,\r\n        validate: {\r\n            usernameState: '',\r\n            passwordState:'',\r\n        },\r\n        isPasswordEditing: false,\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handleCheckbox.bind(this);\r\n        if (this.props.user) {\r\n            const {id, username, password, name, isAdmin} = this.props.user;\r\n            this.setState({id, username, password, name, isAdmin});\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    handleCheckbox = event => {\r\n\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(\"value is :\", value);\r\n        console.log(\"name:\", name);\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    };\r\n\r\n    makeCheckRequest(currentUserValue) {\r\n\r\n        fetch(CHECK_USERNAME_API_URL, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: currentUserValue,\r\n            })\r\n        })\r\n            .then(res => res.text())\r\n            .then(res => {\r\n                if (res === \"false\") {\r\n                    this.setState({validate: {...this.state.validate, usernameState: 'has-success'}});\r\n                    this.setState({enableButton: true})\r\n                } else {\r\n                    this.setState({validate: {...this.state.validate, usernameState: 'has-danger'}});\r\n                    this.setState({enableButton: false})\r\n                }\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n    changePassword() {\r\n\r\n    }\r\n    changeEditingFlag() {\r\n        this.setState({isPasswordEditing: !this.state.isPasswordEditing})\r\n    }\r\n\r\n    checkPassword(e){\r\n        const {validate} = this.state;\r\n        if ((e.target.value).length > 2) {\r\n            validate.passwordState = 'has-success'\r\n        } else {\r\n            validate.passwordState = 'has-danger'\r\n        }\r\n        this.setState({validate})\r\n\r\n    }\r\n    checkIfUsernameExist(e) {\r\n        //We want to reduce the numbers of request checks to server\r\n        //That's why we implement two methods of verify if username on modify/create already exist on db\r\n        const {validate} = this.state;\r\n        const userList = this.props.users;\r\n\r\n        let currentUserValue = e.target.value;\r\n\r\n        //if logged user is NOT admin then we need to make requests to check if new username already exist in users table\r\n        if (userList == null) {\r\n            if(currentUserValue.localeCompare(JSON.parse(sessionStorage.getItem(\"authorizedUser\")).username)!== 0)\r\n                 this.makeCheckRequest(currentUserValue);\r\n\r\n        }//if logged user is admin then he has access to usersList -> we are making a check based on data that is already available\r\n        else {\r\n            validate.usernameState = 'has-danger';\r\n            let buttonFlag = false;\r\n            if (currentUserValue.length > 2) {\r\n                const existingUser = userList.find(user => user.username === currentUserValue);\r\n                if (!existingUser) {\r\n                    validate.usernameState = 'has-success';\r\n                    buttonFlag = true;\r\n                }\r\n            }\r\n            this.setState({enableButton: buttonFlag})\r\n        }\r\n\r\n        this.setState({validate})\r\n    }\r\n\r\n    submitNew = e => {\r\n        e.preventDefault();\r\n\r\n        fetch(`${USERS_API_URL}`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n                name: this.state.name,\r\n                isAdmin: this.state.isAdmin\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(user => {\r\n                this.props.addUserToState(user);\r\n                this.props.toggle();\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    submitEdit = e => {\r\n        e.preventDefault();\r\n        let requestBody = {\r\n            username: this.state.username,\r\n            name: this.state.name,\r\n            isAdmin: this.state.isAdmin\r\n        }\r\n\r\n        if(this.state.isPasswordEditing){\r\n           requestBody.password = this.state.password;\r\n        }\r\n        fetch(`${EDIT_USER_INFO}/${this.state.id}`, {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        })\r\n            .then(() => {\r\n                this.props.toggle();\r\n                this.props.updateUserIntoState(this.state.id);\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n\r\n        return <Form onSubmit={this.props.user ? this.submitEdit : this.submitNew}>\r\n            {this.state.isPasswordEditing &&\r\n            <Fragment>\r\n                <Button onClick={() => this.changeEditingFlag()}>Change Accout Info</Button>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"password\">New Password:</Label>\r\n                    <Input type=\"text\" name=\"password\" onChange={(e) => {\r\n                        this.onChange(e);\r\n                        this.checkPassword(e)\r\n                    }}\r\n                           valid={this.state.validate.passwordState === 'has-success'}\r\n                           invalid={this.state.validate.passwordState === 'has-danger'}/>\r\n                    <FormFeedback valid>\r\n                        Great! Password is valid\r\n                    </FormFeedback>\r\n                    <FormFeedback>\r\n                        Password is less then 3 characters.\r\n                        Add some more characters!\r\n                    </FormFeedback>\r\n                </FormGroup>\r\n                <button>Save</button>\r\n\r\n            </Fragment>\r\n\r\n            }\r\n            {!this.state.isPasswordEditing &&\r\n            <Fragment>\r\n                <Button onClick={() => this.changeEditingFlag()}>Change Password</Button>\r\n                <FormGroup>\r\n\r\n                    <Label for=\"username\">Username:</Label>\r\n                    <Input type=\"text\" name=\"username\" onChange={(e) => {\r\n                        this.onChange(e);\r\n                        this.checkIfUsernameExist(e)\r\n                    }}\r\n                           value={this.state.username === null ? '' : this.state.username}\r\n                           valid={this.state.validate.usernameState === 'has-success'}\r\n                           invalid={this.state.validate.usernameState === 'has-danger'}/>\r\n                    <FormFeedback valid>\r\n                        Great! Username is valid\r\n                    </FormFeedback>\r\n                    <FormFeedback>\r\n                        Username is less then 3 characters or it already exist\r\n                        Change to a valid one!\r\n                    </FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"name\">Name:</Label>\r\n                    <Input type=\"text\" name=\"name\" onChange={this.onChange}\r\n                           value={this.state.name === null ? '' : this.state.name}/>\r\n                </FormGroup>\r\n\r\n                { JSON.parse(sessionStorage.getItem(\"authorizedUser\")).isAdmin && <FormGroup>\r\n                    <Label for=\"name\">IsAdmin:</Label>\r\n                    <Input type=\"checkbox\" name=\"isAdmin\" onChange={this.handleCheckbox}\r\n                           checked={this.state.isAdmin}/>\r\n                </FormGroup>\r\n                }\r\n\r\n                <button disabled={!this.state.enableButton}>Save</button>\r\n            </Fragment>\r\n            }\r\n\r\n        </Form>;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default EditUserForm;","import React, {Component, Fragment} from 'react';\r\nimport {Button, Modal, ModalBody, ModalHeader} from 'reactstrap';\r\nimport AddUserForm from './AddUserForm';\r\nimport EditUserForm from './EditUserForm';\r\n\r\n\r\nclass RegistrationModal extends Component {\r\n\r\n    state = {\r\n        modal: false\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState(previous => ({\r\n            modal: !previous.modal\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        const isNew = this.props.isNew;\r\n\r\n        let title = 'Edit User';\r\n        let button = '';\r\n        if (isNew) {\r\n            title = 'Add User';\r\n\r\n            button = <Button\r\n                color=\"success\"\r\n                onClick={this.toggle}\r\n                style={{minWidth: \"200px\"}}>Add</Button>;\r\n        } else {\r\n            button = <Button\r\n                color=\"warning\"\r\n                onClick={this.toggle}>Edit</Button>;\r\n        }\r\n\r\n        return <Fragment>\r\n            {button}\r\n            <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\r\n\r\n                <ModalBody>\r\n                    {isNew && \r\n                        <AddUserForm\r\n                           addUserToState={this.props.addUserToState}\r\n                           updateUserIntoState={this.props.updateUserIntoState}\r\n                           toggle={this.toggle}\r\n                           user={this.props.user}\r\n                           users={this.props.users}\r\n                       /> ||\r\n                        <EditUserForm\r\n                            addUserToState={this.props.addUserToState}\r\n                            updateUserIntoState={this.props.updateUserIntoState}\r\n                            toggle={this.toggle}\r\n                            user={this.props.user}\r\n                            users={this.props.users}\r\n                        />\r\n                    }\r\n                </ModalBody>\r\n            </Modal>\r\n        </Fragment>;\r\n    }\r\n}\r\n\r\nexport default RegistrationModal;","import React, {Component} from 'react';\r\nimport {Button, Table} from 'reactstrap';\r\nimport {USERS_API_URL} from '../constants';\r\nimport RegistrationModal from \"./form/RegistrationModal\";\r\n\r\nclass UsersList extends Component {\r\n\r\n    deleteItem = id => {\r\n        let confirmDeletion = window.confirm('Do you really wish to delete it?');\r\n        if (confirmDeletion) {\r\n            fetch(`${USERS_API_URL}/${id}`, {\r\n                method: 'delete',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    this.props.deleteItemFromState(id);\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const items = this.props.items;\r\n\r\n        return <Table striped>\r\n            <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th>Id</th>\r\n                <th>Username</th>\r\n                <th>Password</th>\r\n                <th>Name</th>\r\n                <th>Is Admin</th>\r\n                <th style={{textAlign: \"center\"}}>Actions</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {!items || items.length <= 0 ?\r\n                <tr>\r\n                    <td colSpan=\"5\" align=\"center\"><b>No users added yet!</b></td>\r\n                </tr>\r\n                : items.map(item => (\r\n                    <tr key={item.id}>\r\n                        <th scope=\"row\">\r\n                            {item.id}\r\n                        </th>\r\n                        <td>\r\n                            {item.username}\r\n                        </td>\r\n                        <td>\r\n                            {item.password}\r\n                        </td>\r\n                        <td>\r\n                            {item.name}\r\n                        </td>\r\n                        <td>\r\n                            {item.isAdmin.toString()}\r\n                        </td>\r\n                        <td align=\"center\">\r\n                            <div>\r\n                                <RegistrationModal\r\n                                    isNew={false}\r\n                                    user={item}\r\n                                    updateUserIntoState={this.props.updateState}\r\n                                    users={this.props.items}\r\n                                />\r\n                                &nbsp;&nbsp;&nbsp;\r\n                                <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Delete</Button>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    }\r\n}\r\n\r\nexport default UsersList;","import React, {Component} from 'react';\r\nimport {Col, Container, Row} from 'reactstrap';\r\nimport {USERS_API_URL} from '../constants';\r\nimport RegistrationModal from \"./form/RegistrationModal\";\r\nimport UsersList from \"./UsersList\";\r\n\r\nclass Users extends Component {\r\n    state = {\r\n        items: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getItens();\r\n    }\r\n\r\n    getItens = () => {\r\n        fetch(USERS_API_URL)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({items: res}))\r\n            .catch(err => console.log(err));\r\n    };\r\n    addUserToState = user => {\r\n        this.setState(previous => ({\r\n            items: [...previous.items, user]\r\n        }));\r\n    };\r\n    //Update users list after adding a new one\r\n    updateState = (id) => {\r\n        this.getItens();\r\n    };\r\n    deleteItemFromState = id => {\r\n        const updated = this.state.items.filter(item => item.id !== id);\r\n        this.setState({items: updated})\r\n    };\r\n\r\n    render() {\r\n\r\n        return <Container style={{paddingTop: \"100px\"}}>\r\n            <Row>\r\n                <Col>\r\n                    <h3>Users</h3>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <UsersList\r\n                        items={this.state.items}\r\n                        updateState={this.updateState}\r\n                        deleteItemFromState={this.deleteItemFromState}/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <RegistrationModal isNew={true} addUserToState={this.addUserToState} users={this.state.items}/>\r\n                </Col>\r\n            </Row>\r\n        </Container>;\r\n    }\r\n}\r\n\r\nexport default Users;","import React, {Component} from 'react';\r\nimport {Table} from 'reactstrap';\r\nimport {USERS_API_URL} from '../constants';\r\nimport RegistrationModal from \"./form/RegistrationModal\";\r\n\r\nclass Account extends Component {\r\n    state = {\r\n        item: {},\r\n        id: 0\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getItem();\r\n    }\r\n\r\n    getItem = () => {\r\n\r\n        let id = this.state.id;\r\n        if (this.props.authUser.id !== undefined)\r\n            id = this.props.authUser.id;\r\n        else {\r\n            let authUserFromStorage = JSON.parse(sessionStorage.getItem(\"authorizedUser\"));\r\n            if (authUserFromStorage != null) {\r\n                id = authUserFromStorage.id;\r\n            }\r\n        }\r\n\r\n        fetch(`${USERS_API_URL}/${id}`)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({item: res}))\r\n            .catch(err => console.log(err));\r\n    };\r\n    updateState = () => {\r\n        this.getItem();\r\n    };\r\n\r\n    render() {\r\n\r\n        const item = this.state.item;\r\n\r\n        return <Table striped>\r\n            <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th>Username</th>\r\n                <th>Password</th>\r\n                <th>Name</th>\r\n                <th style={{textAlign: \"center\"}}>Actions</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {!item || item.length <= 0 ?\r\n                <tr>\r\n                    <td colSpan=\"5\" align=\"center\"><b>No data available!</b></td>\r\n                </tr>\r\n                :\r\n                <tr key={item.id}>\r\n                    <td>\r\n                        {item.username}\r\n                    </td>\r\n                    <td>\r\n                        {item.password}\r\n                    </td>\r\n                    <td>\r\n                        {item.name}\r\n                    </td>\r\n\r\n                    <td align=\"center\">\r\n                        <div>\r\n                            <RegistrationModal\r\n                                isNew={false}\r\n                                user={item}\r\n                                updateUserIntoState={this.updateState}\r\n                            />\r\n                            &nbsp;&nbsp;&nbsp;\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            }\r\n            </tbody>\r\n        </Table>\r\n    }\r\n}\r\n\r\nexport default Account;","import React, {Component} from 'react';\r\nimport {Button, Col, Container, Form, FormFeedback, FormGroup, Input, Label,} from 'reactstrap';\r\nimport {AUTH_API_URL} from \"../../../constants\";\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            'username': '',\r\n            'password': '',\r\n            validate: {\r\n                usernameState: '',\r\n                passwordState: '',\r\n            },\r\n\r\n            redirect: false,\r\n            loginError: false,\r\n            authUser: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    validateInput(e, inputState) {\r\n\r\n        const {validate} = this.state;\r\n        if ((e.target.value).length > 2) {\r\n            validate[inputState] = 'has-success'\r\n        } else {\r\n            validate[inputState] = 'has-danger'\r\n        }\r\n        this.setState({validate})\r\n    }\r\n\r\n\r\n    handleChange = async (event) => {\r\n        const {target} = event;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const {name} = target;\r\n        await this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    submitForm(e) {\r\n        e.preventDefault();\r\n\r\n        fetch(AUTH_API_URL, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'same-origin',\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(authUser => {\r\n                    if (authUser.username) {\r\n                        sessionStorage.setItem(\"authorizedUser\", JSON.stringify(authUser));\r\n                        this.setState({redirect: true});\r\n                    } else {\r\n                        this.setState({loginError: true});\r\n                    }\r\n\r\n                    this.props.handleLogin(authUser);\r\n\r\n                }\r\n            )\r\n\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n    render() {\r\n        const {username, password} = this.state;\r\n        if (!this.state.redirect) {\r\n            return (\r\n                <Container className=\"App\">\r\n                    <h2>Sign In</h2>\r\n                    <Form className=\"form\" onSubmit={(e) => this.submitForm(e)}>\r\n                        <Col>\r\n                            <FormGroup>\r\n                                <Label>Username</Label>\r\n                                <Input\r\n                                    type=\"username\"\r\n                                    name=\"username\"\r\n                                    id=\"exampleUSername\"\r\n                                    placeholder=\"myusername\"\r\n                                    value={username}\r\n                                    valid={this.state.validate.usernameState === 'has-success'}\r\n                                    invalid={this.state.validate.usernameState === 'has-danger'}\r\n                                    onChange={(e) => {\r\n                                        this.validateInput(e, 'usernameState');\r\n                                        this.handleChange(e)\r\n                                    }}\r\n                                />\r\n                                <FormFeedback valid>\r\n                                    Great! Username is valid\r\n                                </FormFeedback>\r\n                                <FormFeedback>\r\n                                    Uh oh! Looks like there is an issue with your username.\r\n                                    Make sure that username has more than 3 characters!\r\n                                </FormFeedback>\r\n                                {/*<FormText>Your username is most likely your username.</FormText>*/}\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col>\r\n                            <FormGroup>\r\n                                <Label for=\"examplePassword\">Password</Label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"examplePassword\"\r\n                                    placeholder=\"********\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        this.handleChange(e)\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Button>Submit</Button>\r\n                        {\r\n                            this.state.loginError && <p>\r\n                                Login failed\r\n                            </p>\r\n                        }\r\n                    </Form>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return (<Redirect to={'/'}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\nimport {LOGOUT_API_URL} from \"../../../constants\";\r\n\r\nclass Logout extends Component {\r\n    state = {\r\n        navigate: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.logout();\r\n    }\r\n\r\n    logout = () => {\r\n        sessionStorage.removeItem('authorizedUser');\r\n        console.log(\"sessionStorage on logout:\", sessionStorage.getItem('authorizedUser'));\r\n        this.setState({navigate: true});\r\n        this.props.handleLogout({});\r\n\r\n        fetch(LOGOUT_API_URL, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'same-origin',\r\n\r\n        })\r\n            .then(res => res.json())\r\n            .then(user => {\r\n                console.log(\"Successfully logout\");\r\n\r\n\r\n            })\r\n\r\n            .catch(err => console.log(err));\r\n\r\n    };\r\n\r\n    render() {\r\n        const {navigate} = this.state;\r\n        if (navigate) {\r\n            return <Redirect to=\"/\" push={true}/>;\r\n        }\r\n        return <div>Succesfully logged out</div>\r\n    }\r\n}\r\n\r\nexport default Logout;","import React from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\n\r\nexport const PrivateRoute = ({component: Component, roles, ...rest}) => (\r\n    <Route {...rest} render={props => {\r\n        const currentUser = JSON.parse(sessionStorage.getItem(\"authorizedUser\"));\r\n        console.log(\"currentUser:\", currentUser);\r\n        if (!currentUser) {\r\n            // not logged in so redirect to login page with the return url\r\n            return <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\r\n        }\r\n\r\n        // check if route is restricted by role\r\n        if (currentUser.isAdmin != true) {\r\n            // role not authorised so redirect to home page\r\n            return <Redirect to={{pathname: '/'}}/>\r\n        }\r\n\r\n        // authorised so return component\r\n        return <Component/>\r\n    }}/>\r\n);","\r\nexport const Role ={\r\n    \"Admin\":\"admin\",\r\n    \"User\" :\"user\"\r\n}","import React from 'react';\r\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Table} from 'reactstrap';\r\n\r\nclass PatientsList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nameFilter: '',\r\n            hospitalFilter: '',\r\n            isDropdownOpen: false,\r\n\r\n        };\r\n    }\r\n\r\n    onChangeHandler(e) {\r\n        this.setState({\r\n            nameFilter: e.target.value,\r\n        })\r\n    }\r\n\r\n    onDropDownToogle(e) {\r\n        this.setState({\r\n            isDropdownOpen: !this.state.isDropdownOpen,\r\n        })\r\n    }\r\n\r\n    onDropdownItemSelect(e) {\r\n        console.log(\"click value :\", e);\r\n        this.setState({\r\n            hospitalFilter: e,\r\n        })\r\n\r\n    }\r\n\r\n    onDropdownSelectAll() {\r\n        this.setState({\r\n            hospitalFilter: '',\r\n        })\r\n    }\r\n\r\n    formatDate(unformatedDate){\r\n            const date = new Date(unformatedDate);\r\n        const dateTimeFormat = new Intl.DateTimeFormat('en', {\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n        return dateTimeFormat.format(date);}\r\n\r\n    render() {\r\n        //filter by hospital\r\n        let items = this.props.items\r\n            .filter(d => this.state.nameFilter === '' || (d.name.toLowerCase()).includes((this.state.nameFilter).toLowerCase()));\r\n        items = items\r\n            .filter(d => this.state.hospitalFilter === '' || d.hospital.includes(this.state.hospitalFilter));\r\n        let distinctHospitalItems = this.props.items\r\n            .filter((value, index, self) => self\r\n                .map(x => x.hospital)\r\n                .indexOf(value.hospital) === index);\r\n\r\n        return <div>\r\n            <p>\r\n                Type to filter list by name:\r\n                <input id=\"nameFilter\"\r\n                       name=\"nameFilter\"\r\n                       type=\"text\"\r\n                       value={this.state.nameFilter}\r\n                       onChange={this.onChangeHandler.bind(this)}\r\n                />\r\n                <Dropdown isOpen={this.state.isDropdownOpen} toggle={this.onDropDownToogle.bind(this)}>\r\n                    <DropdownToggle caret>\r\n                        {this.state.hospitalFilter === '' ? \"Hospital\" : this.state.hospitalFilter}\r\n                    </DropdownToggle>\r\n\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.onDropdownSelectAll()}>All</DropdownItem>\r\n                        <DropdownItem divider></DropdownItem>\r\n                        {!distinctHospitalItems || distinctHospitalItems.length <= 0 ?\r\n                            <div>\r\n                                \"No Data!\"\r\n                            </div>\r\n\r\n                            : distinctHospitalItems.map(item => (\r\n                                <DropdownItem\r\n                                    onClick={() => this.onDropdownItemSelect(item.hospital)}>{item.hospital}</DropdownItem>\r\n                            ))}\r\n                    </DropdownMenu>\r\n\r\n                </Dropdown>\r\n            </p>\r\n\r\n            <Table striped>\r\n                <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th>Id</th>\r\n                    <th>Name</th>\r\n                    <th>Date Of Birth</th>\r\n                    <th>Hospital</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {!items || items.length <= 0 ?\r\n                    <tr>\r\n                        <td colSpan=\"5\" align=\"center\"><b>No patients added yet!</b></td>\r\n                    </tr>\r\n                    : items.map(item => (\r\n                        <tr key={item.id}>\r\n                            <th scope=\"row\">\r\n                                {item.id}\r\n                            </th>\r\n                            <td>\r\n                                {item.name}\r\n                            </td>\r\n                            <td>\r\n                                {this.formatDate(item.dateOfBirth)}\r\n\r\n                            </td>\r\n                            <td>\r\n                                {item.hospital}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default PatientsList;","import React, {Component} from 'react';\r\nimport {Col, Container, Row} from 'reactstrap';\r\nimport PatientsList from './PatientsList';\r\nimport {PATIENTS_API_URL} from '../constants';\r\n\r\nclass Patients extends Component {\r\n    state = {\r\n        items: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getItems();\r\n    }\r\n\r\n    getItems = () => {\r\n        fetch(PATIENTS_API_URL, {credentials: 'same-origin'})\r\n            .then(res => res.json())\r\n            .then(res => this.setState({items: res}))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n        return <Container style={{paddingTop: \"100px\"}}>\r\n            <Row>\r\n                <Col>\r\n                    <h3>Patients</h3>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <PatientsList\r\n                        items={this.state.items}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </Container>;\r\n    }\r\n}\r\n\r\nexport default Patients;","import React from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\n\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => (\r\n    <Route {...rest} render={props => {\r\n        const currentUser = JSON.parse(sessionStorage.getItem(\"authorizedUser\"));\r\n        console.log(\"currentUser:\", currentUser);\r\n        if (!currentUser) {\r\n            // not logged in so redirect to login page with the return url\r\n            return <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\r\n        }\r\n\r\n        // authorised so return component\r\n        return <Component/>\r\n    }}/>\r\n);","import React, { Component, Fragment } from 'react';\r\nimport AppHeader from './components/AppHeader';\r\nimport AppFooter from './components/AppFooter';\r\nimport Home from './components/Home';\r\nimport {Link, Route, BrowserRouter as Router , Switch} from \"react-router-dom\";\r\nimport Users from \"./components/Users\";\r\nimport Account from \"./components/Account\";\r\nimport Login from \"./components/form/auth/Login\";\r\nimport Logout from \"./components/form/auth/Logout\";\r\nimport {PrivateRoute} from \"./components/PrivateRoute\";\r\nimport {Role} from \"./_helpers/Role\";\r\nimport Patients from \"./components/Patients\";\r\nimport \"./App.css\";\r\nimport {ProtectedRoute} from \"./components/ProtectedRoute\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentUser: {}\r\n        }\r\n    }\r\n    setGlobalCredentials = (authUser) => {\r\n            this.setState({\r\n                currentUser: authUser\r\n            });\r\n    }\r\n\r\n\r\n  render() {\r\n\r\n    return <Router>\r\n        <Fragment>\r\n          <AppHeader />\r\n            <Switch>\r\n                {/*Private routes are for admin user and protected for logged users*/}\r\n                <PrivateRoute path=\"/users\" roles={[Role.Admin]} component={Users}/>\r\n                <ProtectedRoute path=\"/account\" component={() => <Account authUser={this.state.currentUser}/>} />\r\n                {/*Using a callback function to set global credentials if login is successfully and clear them if logout\r\n                Also using sessionStorage for individual cases*/}\r\n                <Route path=\"/login\" >\r\n                    <Login handleLogin={this.setGlobalCredentials}/>\r\n                </Route>\r\n                <Route path=\"/logout\">\r\n                    <Logout handleLogout={this.setGlobalCredentials}/>\r\n                </Route>\r\n                <ProtectedRoute path=\"/patients\" component={Patients}/>\r\n                <Route path=\"/\" component={Home}/>\r\n\r\n            </Switch>\r\n          <AppFooter />\r\n        </Fragment>;\r\n\r\n      </Router>\r\n\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}